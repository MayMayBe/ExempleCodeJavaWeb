package com.spring.henallux.controller;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;
import javax.validation.Valid;
import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;
import com.spring.henallux.dataAccess.dao.ClientDAO;
import com.spring.henallux.dataAccess.dao.CountryDAO;
import com.spring.henallux.dataAccess.dao.EquivalentCategoryDAO;
import com.spring.henallux.model.Client;
import com.spring.henallux.model.Country;
import com.spring.henallux.model.EquivalentCategory;
import com.spring.henallux.model.OrderShop;
import com.spring.henallux.service.CategoriesService;
import com.spring.henallux.service.CountryService;
import com.spring.henallux.sessionAttributeModel.Categories;
import com.spring.henallux.sessionAttributeModel.ClientAndBasket;
import com.spring.henallux.sessionAttributeModel.ClientLogin;
import com.spring.henallux.sessionAttributeModel.ConnectedClient;
import com.spring.henallux.sessionAttributeModel.Countries;
import com.spring.henallux.sessionAttributeModel.InscriptionErrorMessage;
import com.spring.henallux.sessionAttributeModel.LoginErrorMessage;
import com.spring.henallux.sessionAttributeModel.NewClient;
import com.spring.henallux.util.*;

@Controller
@RequestMapping(value="/register")

@SessionAttributes({Constant.CLIENT})
public class RegisterController {
	
	@ModelAttribute(Constant.NEWCLIENT)
	private NewClient newClient(){
		return new NewClient();
	}

	@Autowired
	private MailChecker mailChecker;
	
	@Autowired
	private SHA256 sha256;
	
	@Autowired
	private CategoriesService categoriesService;
	
	@Autowired
	private ClientDAO clientDAO;
	
	@Autowired
	private CountryDAO countryDAO;
	
	@Autowired
	private MessageSource messageSource;
	
	@Autowired
	private CountryService countryService;
	
	@Autowired
	private EquivalentCategoryDAO equivalentCategoryDAO;
	
	public ArrayList<EquivalentCategory> setCategory(Locale locale){
		ArrayList<EquivalentCategory> listCategory = equivalentCategoryDAO.getCategoriesByLanguage(locale.getLanguage());
		return listCategory;
	}
	
	@RequestMapping(method=RequestMethod.GET)
	public String home(Model model, Locale locale,
					   @ModelAttribute(value=Constant.CLIENT)ClientAndBasket client,
					   @ModelAttribute(value=Constant.CATEGORIES)Categories categories,
					   @ModelAttribute(value=Constant.COUNTRIES)Countries countries,
					   @ModelAttribute(value=Constant.NEWCLIENT) NewClient newClient,
					   @ModelAttribute(value=Constant.ERRORMESSAGE)String errorMessage){
		
		//Client déjà connecté => direct à la page account
		if(client.getIdClient() != 0) return "redirect:/account";
		
		categories.setCategories(categoriesService.getCategoriesByLanguage(locale.getLanguage()));
		countries.setCountryList(countryService.getCountries());
		
		model.addAttribute(Constant.CLIENT, client);
		model.addAttribute("titlePage", messageSource.getMessage("loginTitlePage", null, locale));
		model.addAttribute("categories", categories);
		model.addAttribute(Constant.CATEGORIES, categories);
		model.addAttribute(Constant.COUNTRIES, countries);
		model.addAttribute(Constant.NEWCLIENT, newClient);
		model.addAttribute(Constant.ERRORMESSAGE, "");
		return "integrated:register";
		
	}
	
	
	/*@RequestMapping(value="/login", method=RequestMethod.POST)
	public String getLoginData(Model model,Locale locale,
			@ModelAttribute(value=Constant.CLIENT) Client client,
			@ModelAttribute(value=Constant.ORDERSHOP) OrderShop orderShop,
			@ModelAttribute(value=Constant.CONNECTEDCLIENT) ConnectedClient connectedClient,
			@ModelAttribute(value=Constant.LOGINERROR) LoginErrorMessage loginErrorMessage,
			@ModelAttribute(value=Constant.ERRORMESSAGE) InscriptionErrorMessage inscriptionErrorMessage,
			@ModelAttribute(value=Constant.CATEGORIES)Categories categories){
		
		categories.setCategories(setCategory(locale));
		model.addAttribute("categories", categories);

		if(connectedClient.isConnected()) return "redirect:/account";
		
		if(MailChecker.isEmailValid(client.getEmail()) && !client.getPassword().equals((""))){

			Client recordClient = null;
			recordClient = clientDAO.findByEmail(client.getEmail());
			if(recordClient != null && SHA256.correctPassword(recordClient, client)){
				
				client.setIdClient(recordClient.getIdClient());
				client.setFirstName(recordClient.getFirstName());
				client.setLastName(recordClient.getLastName());
				client.setEmail(recordClient.getEmail());
				client.setTelephoneNumber(recordClient.getTelephoneNumber());
				client.setMobileNumber(recordClient.getMobileNumber());
				client.setStreetName(recordClient.getStreetName());
				client.setCity(recordClient.getCity());
				client.setStreetName(recordClient.getStreetName());
				client.setZipcode(recordClient.getZipcode());
				client.setStreetNumber(recordClient.getStreetNumber());
				client.setCountry(recordClient.getCountry());
				loginErrorMessage.setContent("");
				inscriptionErrorMessage.setContent("");
				
				//ConnectedClient
				connectedClient.setConnected(true);
				//Ajout gestion panier client
				orderShop.setClient(client);
				Date today = Calendar.getInstance().getTime();
				orderShop.setDateOrderShop(today);
				orderShop.setOrderShopSent(false);

				model.addAttribute(Constant.CLIENT, client);
			
				return "redirect:/account";
			}
			else
			{
				
				loginErrorMessage.setContent(messageSource.getMessage("loginIncorrect", null, locale));
			}
		}
		return "redirect:/loginRegister";
	}*/
	
	@RequestMapping(method=RequestMethod.POST)
	public String getFormData(Model model,Locale locale,
							@ModelAttribute(value=Constant.CLIENT)ClientAndBasket client,
							   @ModelAttribute(value=Constant.CATEGORIES)Categories categories,
							   @ModelAttribute(value=Constant.COUNTRIES)Countries countries,
							   @ModelAttribute(value=Constant.NEWCLIENT) NewClient newClient,
							   @ModelAttribute(value=Constant.ERRORMESSAGE) String errorMessage){
		
		categories.setCategories(setCategory(locale));
		countries.setCountryList(countryService.getCountries());
		model.addAttribute("categories", categories);
		
		if(newClient.getFirstName() != null){
			System.out.println(newClient.getFirstName());
		}
		if(newClient.getLastName() != null){
			System.out.println(newClient.getLastName());
		}
		
		errorMessage = "";
		
		if(newClient.getLastName().isEmpty() || newClient.getLastName().length() > 50){
			errorMessage = messageSource.getMessage("lastNameError", null, locale);
		}else{
			if(newClient.getFirstName().isEmpty() || newClient.getFirstName().length() > 50){
				errorMessage = messageSource.getMessage("firstNameError", null, locale);
			}else{
				if(newClient.getEmail().isEmpty() || !mailChecker.isEmailValid(newClient.getEmail())){
					errorMessage = messageSource.getMessage("mailError", null, locale);
				}else{
					if(newClient.getPassword().length() < 8 || newClient.getPassword().length() > 65){
						errorMessage = messageSource.getMessage("passwordRegisterError", null, locale);
					}else{
						if(newClient.getConfirmPassword().length() < 8 || newClient.getConfirmPassword().length() > 65){
							errorMessage = messageSource.getMessage("passwordConfirmError", null, locale);
						}else{
							if(!newClient.getConfirmPassword().equals(newClient.getPassword())){
								errorMessage = messageSource.getMessage("passwordMatchError", null, locale);
							}else{
								if(newClient.getTelephoneNumber().isEmpty() || newClient.getTelephoneNumber().length() > 25){
									errorMessage = messageSource.getMessage("telephoneError", null, locale);
								}else{
									if(!newClient.getMobileNumber().isEmpty() && newClient.getMobileNumber().length() > 36){
										errorMessage = messageSource.getMessage("mobileError", null, locale);
									}else{
										if(newClient.getStreetName().isEmpty() || newClient.getStreetName().length() > 25){
											errorMessage = messageSource.getMessage("streetNameError", null, locale);
										}else{
											if(newClient.getStreetNumber().isEmpty() || newClient.getStreetNumber().length() > 8){
												errorMessage = messageSource.getMessage("streetNumError", null, locale);
											}else{
												if(newClient.getZipcode().isEmpty() || newClient.getZipcode().length() > 8){
													errorMessage = messageSource.getMessage("zipCodeError", null, locale);
												}else{
													if(newClient.getCity().isEmpty() || newClient.getCity().length() > 50){
														errorMessage = messageSource.getMessage("cityError", null, locale);
													}else{
														if(newClient.getCountry().isEmpty() || newClient.getCountry().length() > 50){
															errorMessage = messageSource.getMessage("countryError", null, locale);
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		
		System.out.println(errorMessage);
		
		if(errorMessage.isEmpty()){
			Country country = countryDAO.findByName(newClient.getCountry());
			Client registerClient = new Client(newClient.getFirstName(), newClient.getLastName(), newClient.getEmail(), sha256.encodePassword(newClient.getPassword()), 
					newClient.getTelephoneNumber(), newClient.getMobileNumber(), newClient.getStreetName(), newClient.getStreetNumber(), 
					newClient.getZipcode(), newClient.getCity(), country);
			
			Client savedClient = clientDAO.save(registerClient);
			
			client.setIdClient(savedClient.getIdClient());
			client.setFirstName(savedClient.getFirstName());
			client.setLastName(savedClient.getLastName());
			
			model.addAttribute(Constant.CLIENT, client);
			model.addAttribute("titlePage", messageSource.getMessage("loginTitlePage", null, locale));
			model.addAttribute(Constant.CATEGORIES, categories);
			return "integrated:register";
		}else{
			
			model.addAttribute(Constant.CLIENT, client);
			model.addAttribute("titlePage", messageSource.getMessage("loginTitlePage", null, locale));
			model.addAttribute(Constant.CATEGORIES, categories);
			model.addAttribute(Constant.COUNTRIES, countries);
			model.addAttribute(Constant.NEWCLIENT, newClient);
			model.addAttribute(Constant.ERRORMESSAGE, errorMessage);
			return "integrated:register";
		}
		

							
							/*Country country = countryDAO.findByName(newClient.getCountry());

							String password = SHA256.encodePassword(newClient.getPassword());
							
							Client currentClient = new Client(newClient.getEmail(),
													password,newClient.getFirstName(),
													newClient.getLastName(),newClient.getTelephoneNumber(),
													newClient.getMobileNumber(),newClient.getStreetName(),
													newClient.getStreetNumber(), newClient.getZipcode(),
													newClient.getCity(),country);
							
							clientDAO.save(currentClient);
							client.setFirstName(currentClient.getFirstName());
							client.setLastName(currentClient.getLastName());
							client.setEmail(currentClient.getEmail());
							client.setTelephoneNumber(currentClient.getTelephoneNumber());
							client.setMobileNumber(currentClient.getMobileNumber());
							client.setStreetName(currentClient.getStreetName());
							client.setCity(currentClient.getCity());
							client.setStreetName(currentClient.getStreetName());
							client.setZipcode(currentClient.getZipcode());
							client.setStreetNumber(currentClient.getStreetNumber());
							
							//Initialiser l'attribut de session client
							Client clientAttribute = clientDAO.findByEmail(currentClient.getEmail());
							client.setIdClient(clientAttribute.getIdClient());
							
							
							
							
							//ConnectedClient
							connectedClientState.setConnected(true);
							model.addAttribute(Constant.CLIENT, client);
							errorMessage.setContent(null);
							return "redirect:/account";
						}
					}
				}
			}
		}

		
		return "redirect:/loginRegister"; //Si le retour n'est pas une redirection, l'URL reste /send et les liens ne sont plus fonctionnels
	*/
		
		//return "integrated:register";
	}
	



}
