package com.spring.henallux.controller;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Set;
import javax.validation.Valid;

import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.spring.henallux.dataAccess.dao.ClientDAO;
import com.spring.henallux.dataAccess.dao.CountryDAO;
import com.spring.henallux.dataAccess.dao.EquivalentCategoryDAO;
import com.spring.henallux.model.Client;
import com.spring.henallux.model.Country;
import com.spring.henallux.model.EquivalentCategory;
import com.spring.henallux.model.OrderShop;
import com.spring.henallux.model.PasswordChangeForm;
import com.spring.henallux.model.UpdateClientForm;
import com.spring.henallux.service.CategoriesService;
import com.spring.henallux.service.CountryService;
import com.spring.henallux.sessionAttributeModel.Categories;
import com.spring.henallux.sessionAttributeModel.ClientAndBasket;
import com.spring.henallux.sessionAttributeModel.ClientBasket;
import com.spring.henallux.sessionAttributeModel.ConnectedClient;
import com.spring.henallux.sessionAttributeModel.Countries;
import com.spring.henallux.sessionAttributeModel.InscriptionErrorMessage;
import com.spring.henallux.util.Constant;
import com.spring.henallux.util.SHA256;

@Controller
@RequestMapping(value="/changePassword")
@SessionAttributes({Constant.CLIENT})
					
public class ChangePasswordController {
	
	@Autowired
	private MessageSource titleMessage;

	@Autowired
	private ClientDAO clientDAO;
	
	@Autowired
	private MessageSource messageSource;
	
	@Autowired
	private CountryService countryService;
	
	@Autowired
	private CountryDAO countryDAO;
	
	@Autowired
	private SHA256 sha256;
	
	@Autowired
	private EquivalentCategoryDAO equivalentCategoryDAO;
	
	@ModelAttribute(Constant.UPDATECLIENTFORM)
	public UpdateClientForm updateClientForm(){
		return new UpdateClientForm();
	}
	
	
	@Autowired
	private CategoriesService categoriesService;
	
	
	@RequestMapping(method=RequestMethod.GET)
	public String home(Model model, Locale locale, @ModelAttribute(value=Constant.CLIENT)ClientAndBasket client,
			   @ModelAttribute(value=Constant.CATEGORIES)Categories categories,
			   @ModelAttribute(value=Constant.ERRORMESSAGE)String errorMessage){
		
		System.out.println("Début change password");
		errorMessage = "";
		
		categories.setCategories(categoriesService.getCategoriesByLanguage(locale.getLanguage()));

		model.addAttribute("titlePage", titleMessage.getMessage("accountTitlePage", null, locale));
		model.addAttribute(Constant.PASSWORDCHANGEFORM, new PasswordChangeForm());
		model.addAttribute(Constant.CLIENT, client);
		model.addAttribute(Constant.CATEGORIES, categories);
		model.addAttribute(Constant.ERRORMESSAGE, errorMessage);
		return "integrated:changePassword";
	}
	
	@RequestMapping(method=RequestMethod.GET, value="/signout")
	public String signout(Model model, Locale locale, @ModelAttribute(value=Constant.CLIENT)ClientAndBasket client,
			   @ModelAttribute(value=Constant.CATEGORIES)Categories categories){
		
		client.setDefault();
		categories.setCategories(categoriesService.getCategoriesByLanguage(locale.getLanguage()));
		
		model.addAttribute("titlePage", titleMessage.getMessage("accountTitlePage", null, locale));
		model.addAttribute(Constant.CLIENT, client);
		model.addAttribute(Constant.CATEGORIES, categories);
		return "integrated:welcome";
	}
	
	@RequestMapping(method = RequestMethod.POST)
    public String changePassword(Model model, Locale locale, 
    		@ModelAttribute(value=Constant.CLIENT)ClientAndBasket client,
			   @ModelAttribute(value=Constant.CATEGORIES)Categories categories,
			   @ModelAttribute(value=Constant.PASSWORDCHANGEFORM)PasswordChangeForm passwordForm,
			   @ModelAttribute(value=Constant.ERRORMESSAGE)String errorMessage){  
		
		System.out.println("POST change password");
		
		categories.setCategories(categoriesService.getCategoriesByLanguage(locale.getLanguage()));
		
		errorMessage = "";
		
		Client savedClient = clientDAO.findByEmail(client.getEmail());
		
		
		if(passwordForm.getOldPassword().isEmpty() || passwordForm.getNewPassword().isEmpty() || passwordForm.getRetypeNewPassword().isEmpty()){
			errorMessage = messageSource.getMessage("passwordsError", null, locale);
		}else{
			if(!sha256.correctPassword(savedClient.getPassword(), passwordForm.getOldPassword())){
				errorMessage = messageSource.getMessage("oldPasswordError", null, locale);
			}else{
				if(passwordForm.getNewPassword().length() > 8 || passwordForm.getNewPassword().length() > 65){
					errorMessage = messageSource.getMessage("newPasswordError", null, locale);
				}else{
					if(passwordForm.getRetypeNewPassword().length() < 8 || passwordForm.getRetypeNewPassword().length() > 65){
						errorMessage = messageSource.getMessage("passwordConfirmError", null, locale);
					}else{
						if(!passwordForm.getNewPassword().equals(passwordForm.getRetypeNewPassword())){
							errorMessage = messageSource.getMessage("passwordConfirmError", null, locale);
						}
					}
				}
			}
		}
		
		System.out.println(errorMessage);
		
		if(errorMessage.isEmpty()){
			
			savedClient.setPassword(passwordForm.getNewPassword());
			clientDAO.update(savedClient);
			errorMessage = "0";
		}
		
		model.addAttribute(Constant.PASSWORDCHANGEFORM, passwordForm);
		model.addAttribute(Constant.CLIENT, client);
		model.addAttribute(Constant.CATEGORIES, categories);
		model.addAttribute("titlePage", titleMessage.getMessage("accountTitlePage", null, locale));
		model.addAttribute(Constant.ERRORMESSAGE, errorMessage);
		
		/*if(errors.hasErrors()){
			errorMessage.setContent(messageSource.getMessage("errorPasswordChange", null, locale));
			Set<String> listErrors = new HashSet<String>(); //Pour retirer les éléments dupliqués
			for(FieldError f : errors.getFieldErrors()){
				listErrors.add(f.getField());
			}
			
			for(String f : listErrors){
				errorMessage.appendContent("<br>" + messageSource.getMessage(f,null,locale));	
			}
			
		}
		else
		{
		
			if(passwordChangeForm.getNewPassword().equals(passwordChangeForm.getRetypeNewPassword()))
			{
				
				/*client.setPassword(passwordChangeForm.getOldPassword());
				Client recordClient = clientDAO.findByEmail(client.getEmail());
				if(SHA256.correctPassword(recordClient, client))
				{
					errorMessage.setContent(null);
					recordClient.setPassword(SHA256.encodePassword(passwordChangeForm.getNewPassword()));
					clientDAO.save(recordClient);
					return "redirect:/welcome";
				}
				else
				{
					errorMessage.setContent(messageSource.getMessage("wrongPassword",null,locale));	
				}*/
				
			/*}
			else
			{
				errorMessage.setContent(messageSource.getMessage("passwordNotCorrespondingToConfirm",null,locale));
			}
			
		}*/
		
		return "integrated:changePassword";
    }

}
